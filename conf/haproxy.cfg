global
  maxconn 65536
  quiet

  # Performance turning
  tune.maxaccept -1

defaults
    mode http

    # Add x-forwarded-for header.
    option forwardfor
    option redispatch

    timeout connect 5s
    timeout client 30s
    timeout server 30s

    # Long timeout for WebSocket connections, requires haproxy 1.5
    timeout tunnel 2h

frontend public
    bind *:8888
    timeout client 120s

    option forwardfor
    # Fake connection:close, required in this setup.
    option http-server-close
    option http-pretend-keepalive

    #option httplog

    #acl is_sockjs path_beg / /broadcast /close
    #acl is_stats  path_beg /stats

  #acl is_websocket hdr(Upgrade) -i WebSocket
  #acl is_websocket_server hdr_end(host) -i ws.example.com
  #use_backend ws if is_websocket is_websocket_server
  #default_backend www

    #acl is_websocket hdr(Upgrade) -i Websocket
    #acl is_websocket_server hdr_end(host) -i ws.odin.org
    #use_backend ws if is_websocket is_websocket_server
    #use_backend ws if is_websocket
    

    #use_backend sockjs if is_sockjs
    #use_backend stats if is_stats
    default_backend realtime

backend ws
    # Load-balance according to hash created from first two
    # directories in url path. For example requests going to /1/
    # should be handled by single server (assuming resource prefix is
    # one-level deep, like "/echo").
    #balance uri depth 3
    #balance roundrobin
    #timeout server  120s
    server ws1 127.0.0.1:11000
    server ws2 127.0.0.1:11001
    server ws3 127.0.0.1:11002
    server ws4 127.0.0.1:11003

backend realtime
    # Load-balance according to hash created from first two
    # directories in url path. For example requests going to /1/
    # should be handled by single server (assuming resource prefix is
    # one-level deep, like "/echo").
    #balance uri depth 3
    balance roundrobin
    #timeout server  120s
    server node1 127.0.0.1:10000 maxconn 1024 check
    server node2 127.0.0.1:10001 maxconn 1024 check
    server node3 127.0.0.1:10002 maxconn 1024 check
    server node4 127.0.0.1:10003 maxconn 1024 check
    server node5 127.0.0.1:10004 maxconn 1024 check
    server node6 127.0.0.1:10005 maxconn 1024 check
    server node7 127.0.0.1:10006 maxconn 1024 check
    server node8 127.0.0.1:10007 maxconn 1024 check

listen stats :1936
  mode http
  stats enable
  stats hide-version
  stats realm Haproxy\ Statistics
  stats uri /
  stats auth guest:guest
